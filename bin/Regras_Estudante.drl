package com.sample

import com.sample.Simulador;
import com.sample.model.*;
import java.util.Scanner;
import java.math.*;

rule "Verificar Nacionalidade Portuguesa"
	salience 100
	when
		$reprovado:Reprovado(checkNacionalidade == false)
		$estudante:Estudante(nacionalidadePortuguesa == false)
	then
		$reprovado.addMotivo("\nCrédito reprovado - Estudante sem nacionalidade Portuguesa");
		$reprovado.setCheckNacionalidade(true);
		update($reprovado);
end
rule "Estudante sem matricula"
	salience 100
	when
		$reprovado:Reprovado(checkMatricula == false)
		$estudante:Estudante(matriculadoUniversidade == false)
	then
		$reprovado.addMotivo("\nCrédito reprovado - Estudante não matriculado");
		$reprovado.setCheckMatricula(true);
		update($reprovado);
end 
rule "Cliente Sem Conta Bancária"
	salience 100
	when
		$reprovado:Reprovado(checkContaBancaria == false)
		$estudante:Estudante(isContaBancaria() == false)
	then
		$reprovado.addMotivo("\nCrédito reprovado - Estudante sem conta bancária");
		$reprovado.setCheckContaBancaria(true);
		update($reprovado);
end 
rule "Estudante com histórico de divida"
	salience 100
	when
		$estudante:Estudante(isHistoricoIncumprimento() == true)
		$reprovado:Reprovado(checkDivida == false)
	then
		$reprovado.addMotivo("\nCrédito reprovado -Estudante Histórico de incumprimento");
		$reprovado.setCheckDivida(true);
		update($reprovado);
end 
rule "Verificiar Fiador"
	salience 100
	when
		$reprovado:Reprovado(checkFiador == false)
		not Fiador()
	then
		$reprovado.addMotivo("\nCrédito reprovado -Estudante sem fiador");
		$reprovado.setCheckFiador(true);
		update($reprovado);
end
rule "Estudante com creditos iguais"
	salience 100
	when
		$estudante:Estudante(creditosIguais == true)
		$reprovado:Reprovado(checkCreditosIguais == false)
	then
		$reprovado.addMotivo("\nCrédito reprovado -Estudante com créditos iguais");
		$reprovado.setCheckCreditosIguais(true);
		update($reprovado);
end 
rule "Fiador com histórico de divida"
	salience 99
	when
		exists Fiador()
		$fiador:Fiador(isHistoricoIncumprimento() == true)
		$reprovado:Reprovado(checkDividaFiador == false)
	then
		$reprovado.addMotivo("\nCrédito reprovado -Fiador Histórico de incumprimento");
		$reprovado.setCheckDividaFiador(true);
		update($reprovado);
end 
rule "Fiador sem idade"
	salience 99
	when
		exists Fiador()
		$reprovado:Reprovado(checkIdadeFiador == false)
		$fiador:Fiador(getIdade()<18 ||getIdade()>75)
	then
		$reprovado.addMotivo("\nCrédito reprovado - Fiador com idade errada");
		$reprovado.setCheckIdadeFiador(true);
		update($reprovado);
end 
rule "Fiador Sem Conta Bancária"
	salience 99
	when
		exists Fiador()
		$reprovado:Reprovado(checkContaBancariaFiador == false)
		$fiador:Fiador(isContaBancaria() == false)
	then
		$reprovado.addMotivo("\nCrédito reprovado - Fiador sem conta bancária");
		$reprovado.setCheckContaBancariaFiador(true);
		update($reprovado);
end 
rule "Fiador sem emprego estável"
	salience 99
	when
		exists Fiador()
		$reprovado:Reprovado(checkEmpregoFiador == false)
		$fiador:Fiador(isEmprego() == false)
	then
		$reprovado.addMotivo("\nCrédito reprovado - Fiador sem emprego estável");
		$reprovado.setCheckEmpregoFiador(true);
		update($reprovado);
end

rule "Calcula taxa de esforco com fiador"
	salience 98
	when
		exists Fiador()
		$fiador:Fiador()
		$credito:Credito(checkTaxaEsforco == false)
		$cliente:Cliente()
	then
		float mensalidade = ($credito.getMontanteEscolhido()/$credito.getPrazoAmortizacao())+$cliente.getTotalDespesasCreditos()+$fiador.getTotalDespesasCreditos();
		float ordenado = $cliente.getOrdenado()+$fiador.getOrdenado();
		$credito.setTaxaEsforco((mensalidade*100)/ordenado);
		$credito.setCheckTaxaEsforco(true);
		update($credito);
end

rule "Verifica taxa de esforco"
	salience 97
	when
		$reprovado:Reprovado(checkTaxaEsforco == false)
		$credito:Credito(taxaEsforco > 35)  
	then
		$reprovado.addMotivo("\nCrédito negado -> Taxa de esforço "+$credito.getTaxaEsforco());
		$reprovado.setCheckTaxaEsforco(true);
		update($reprovado);
end

rule "Verifica Reprovado"
	salience 96
	when
		$reprovado:Reprovado(getNumberMotivos() > 0)
	then
		System.out.println(""+$reprovado);
end


rule "Verifica Produto Financeiro Pessoal"
	salience 94
	when
		$reprovado:Reprovado(getNumberMotivos() == 0)
		$credito:CreditoEstudante(produtofinanceiro == true && produtofinanceiroValor >= 0)
	then
		$credito.setProdutofinanceiroValor(-0.25f);
		update($credito);
end

rule "Calcula Crédito Variavel 1º ano media menor 14 "
	salience 93
	when
		$reprovado:Reprovado(getNumberMotivos() == 0)
		$credito:CreditoEstudante(tipoJuros == "Variavel" && TAN <= 0)
		$estudante:Estudante(mediaCurso < 14 || anoEscolaridade <= 1)
	then
		float minhaTaxa = 1.25f;
        System.out.println("Spread Nomral ->"+minhaTaxa);
        $credito.setEuribor(0.049f);
        $credito.setSpread(minhaTaxa+$credito.getProdutofinanceiroValor());
        System.out.println("Spread com seguros ->"+$credito.getSpread());
        $credito.setTAN($credito.getSpread()+$credito.getEuribor());
        System.out.println("TAN -> "+$credito.getTAN());
        update($credito);
end
rule "Calcula Crédito Variavel media entre 14 e 16 "
	salience 93
	when
		$reprovado:Reprovado(getNumberMotivos() == 0)
		$credito:CreditoEstudante(tipoJuros == "Variavel" && TAN <= 0)
		$estudante:Estudante((mediaCurso >= 14 || mediaCurso <=16 ) && anoEscolaridade >= 1)
	then
		float minhaTaxa = 0.9f;
        System.out.println("Spread Nomral ->"+minhaTaxa);
        $credito.setEuribor(0.049f);
        $credito.setSpread(minhaTaxa+$credito.getProdutofinanceiroValor());
        System.out.println("Spread com seguros ->"+$credito.getSpread());
        $credito.setTAN($credito.getSpread()+$credito.getEuribor());
        System.out.println("TAN -> "+$credito.getTAN());
        update($credito);
end
rule "Calcula Crédito Variavel media maior do que 16 "
	salience 93
	when
		$reprovado:Reprovado(getNumberMotivos() == 0)
		$credito:CreditoEstudante(tipoJuros == "Variavel" && TAN <= 0)
		$estudante:Estudante( mediaCurso >16 && anoEscolaridade >= 1)
	then
		float minhaTaxa = 0.45f;
        System.out.println("Spread Nomral ->"+minhaTaxa);
        $credito.setEuribor(0.049f);
        $credito.setSpread(minhaTaxa+$credito.getProdutofinanceiroValor());
        System.out.println("Spread com seguros ->"+$credito.getSpread());
        $credito.setTAN($credito.getSpread()+$credito.getEuribor());
        System.out.println("TAN -> "+$credito.getTAN());
        update($credito);
end

rule "Verificar limites credito variavel"
	salience 92
	when
		$reprovado:Reprovado(getNumberMotivos() == 0)
		$credito:CreditoEstudante(tipoJuros == "Variavel" && (TAN < 0.499f || TAN > 1.069f))
	then
		if($credito.getTAN() < 0.499f) {
			$credito.setTAN(0.499f);
		} else {
			$credito.setTAN(1.069f);
		}
		System.out.println("Crédito ajustado aos limites -> "+$credito.getTAN());
		update($credito);
end
rule "Calcula Total a Pagar Taxa Variavel"
	salience 91
	when
		$reprovado:Reprovado(getNumberMotivos() == 0)
		$credito:CreditoEstudante(tipoJuros == "Variavel" && totalPagar <= 0)
	then
		float jurosPagar = $credito.getMontanteEscolhido()*($credito.getTAN()/100);
		$credito.setTotalPagar($credito.getMontanteEscolhido()+jurosPagar);
		System.out.println("Total a pagar "+$credito.getTotalPagar());
		update($credito);
end
rule "Calcula Mensalidades"
	salience 90
	when
		$reprovado:Reprovado(getNumberMotivos() == 0)
		$credito:CreditoEstudante(mensalidade <= 0)
	then
		float mensalidade = $credito.getTotalPagar()/$credito.getPrazoAmortizacao();
		$credito.setMensalidade(mensalidade);
		System.out.println("Mensalidade -> "+mensalidade);
		update($credito);
end

